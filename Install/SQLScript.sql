DROP DATABASE IF EXISTS CompanyAccountDB;

CREATE DATABASE CompanyAccountDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

USE CompanyAccountDB;

CREATE TABLE IF NOT EXISTS AVAILABLE
(
    AVAILABLE_ID TINYINT(1) UNSIGNED AUTO_INCREMENT UNIQUE,
    AVAILABLE_Deleted BIT(1) NOT NULL DEFAULT FALSE,
    AVAILABLE_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS ACCESS_LEVEL
(
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED AUTO_INCREMENT UNIQUE,
    ACCESS_LEVEL_Title VARCHAR(32) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    ACCESS_LEVEL_Clearance TINYINT(1) UNSIGNED UNIQUE NOT NULL,
    ACCESS_LEVEL_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COUNTRY_DATA
(
    COUNTRY_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COUNTRY_DATA_Title varchar(32) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    COUNTRY_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COUNTRY_DATA_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COUNTRY
(
    COUNTRY_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COUNTRY_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    COUNTRY_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COUNTRY_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(COUNTRY_DATA_ID) REFERENCES COUNTRY_DATA(COUNTRY_DATA_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COUNTY_DATA
(
    COUNTY_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COUNTY_DATA_Title VARCHAR(64) NOT NULL,
    COUNTY_DATA_Tax DECIMAL(8,4) NOT NULL DEFAULT 0,
    COUNTY_DATA_InterestRate DECIMAL(8,4) NOT NULL DEFAULT 0,
    COUNTY_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COUNTY_DATA_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COUNTY
(
    COUNTY_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COUNTY_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    COUNTRY_ID BIGINT(8) UNSIGNED NOT NULL,
    COUNTY_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COUNTY_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID),
    FOREIGN KEY(COUNTY_DATA_ID) REFERENCES COUNTY_DATA(COUNTY_DATA_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COMPANY_DATA
(
    COMPANY_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COMPANY_DATA_Title varchar(64) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    COMPANY_DATA_Date DATE NOT NULL,
    COMPANY_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COMPANY_DATA_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS COMPANY
(
    COMPANY_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    COMPANY_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    COMPANY_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    COUNTY_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(COMPANY_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(COMPANY_DATA_ID) REFERENCES COMPANY_DATA(COMPANY_DATA_ID),
    FOREIGN KEY(COUNTY_ID) REFERENCES COUNTY(COUNTY_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EMPLOYEE_POSITION
(
    EMPLOYEE_POSITION_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    EMPLOYEE_POSITION_Title varchar(64) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_POSITION_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(EMPLOYEE_POSITION_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EMPLOYEE_DATA
(
    EMPLOYEE_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    EMPLOYEE_DATA_Salary DECIMAL(65,2) NOT NULL,
    EMPLOYEE_DATA_BDay DATE NOT NULL,
    EMPLOYEE_DATA_PN VARCHAR(16) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_SN VARCHAR(16) NOT NULL DEFAULT "None" COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_Email VARCHAR(64) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_Name VARCHAR(32) NOT NULL COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_Surname VARCHAR(32) NOT NULL COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_PassWord VARCHAR(64) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    EMPLOYEE_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(EMPLOYEE_DATA_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EMPLOYEE
(
    EMPLOYEE_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    EMPLOYEE_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    EMPLOYEE_POSITION_ID BIGINT(8) UNSIGNED NOT NULL,
    EMPLOYEE_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    COMPANY_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(EMPLOYEE_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(EMPLOYEE_POSITION_ID) REFERENCES EMPLOYEE_POSITION(EMPLOYEE_POSITION_ID),
    FOREIGN KEY(EMPLOYEE_DATA_ID) REFERENCES EMPLOYEE_DATA(EMPLOYEE_DATA_ID),
    FOREIGN KEY(COMPANY_ID) REFERENCES COMPANY(COMPANY_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS CUSTOMER_DATA
(
    CUSTOMER_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    CUSTOMER_DATA_Name VARCHAR(32) NOT NULL COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_Surname VARCHAR(32) NOT NULL COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_PN VARCHAR(16) NOT NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_SN VARCHAR(16) NOT NULL DEFAULT "None" COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_Email VARCHAR(64) NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_VAT VARCHAR(16) NULL UNIQUE COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_Addr VARCHAR(256) NOT NULL DEFAULT "None" COLLATE utf8mb4_unicode_ci,
    CUSTOMER_DATA_Note VARCHAR(256) NOT NULL DEFAULT "None" COLLATE utf8mb4_unicode_ci,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    CUSTOMER_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY(CUSTOMER_DATA_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS CUSTOMER
(
    CUSTOMER_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    CUSTOMER_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    CUSTOMER_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(CUSTOMER_ID),
    FOREIGN KEY(CUSTOMER_DATA_ID) REFERENCES CUSTOMER_DATA(CUSTOMER_DATA_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB_INCOME
(
    JOB_INCOME_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_INCOME_Price DECIMAL(65,2) NULL DEFAULT 0,
    JOB_INCOME_PIA DECIMAL(65,2) NULL DEFAULT 0,
    JOB_INCOME_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_INCOME_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB_OUTCOME
(
    JOB_OUTCOME_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_OUTCOME_Expenses DECIMAL(65,2) NULL DEFAULT 0,
    JOB_OUTCOME_Damage DECIMAL(65,2) NULL DEFAULT 0,
    JOB_OUTCOME_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_OUTCOME_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB_DATA
(
    JOB_DATA_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_DATA_Title VARCHAR(64) NOT NULL COLLATE utf8mb4_unicode_ci,
    JOB_DATA_Date DATE NOT NULL,
    JOB_DATA_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_DATA_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB
(
    JOB_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    JOB_DATA_ID BIGINT(8) UNSIGNED NOT NULL,
    JOB_INCOME_ID BIGINT(8) UNSIGNED NOT NULL,
    JOB_OUTCOME_ID BIGINT(8) UNSIGNED NOT NULL,
    COMPANY_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(JOB_DATA_ID) REFERENCES JOB_DATA(JOB_DATA_ID),
    FOREIGN KEY(JOB_INCOME_ID) REFERENCES JOB_INCOME(JOB_INCOME_ID),
    FOREIGN KEY(JOB_OUTCOME_ID) REFERENCES JOB_OUTCOME(JOB_OUTCOME_ID),
    FOREIGN KEY(COMPANY_ID) REFERENCES COMPANY(COMPANY_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB_INCOME_TIME
(
    JOB_INCOME_TIME_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_INCOME_TIME_PIT DECIMAL(65,2) NULL DEFAULT 0,
    JOB_INCOME_TIME_Date DATE NOT NULL,
    JOB_INCOME_TIME_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    JOB_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_INCOME_TIME_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(JOB_ID) REFERENCES JOB(JOB_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS JOB_ASSIGMENT
(
    JOB_ASSIGMENT_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    JOB_ASSIGMENT_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    EMPLOYEE_ID BIGINT(8) UNSIGNED NOT NULL,
    JOB_ID BIGINT(8) UNSIGNED NOT NULL,
    CUSTOMER_ID BIGINT(8) UNSIGNED NOT NULL,
    COUNTY_ID BIGINT(8) UNSIGNED NOT NULL,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(JOB_ASSIGMENT_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY(JOB_ID) REFERENCES JOB(JOB_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY(COUNTY_ID) REFERENCES COUNTY(COUNTY_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS SHAREHOLDER
(
    SHAREHOLDER_ID BIGINT(8) UNSIGNED AUTO_INCREMENT UNIQUE,
    SHAREHOLDER_CDate TIMESTAMP NOT NULL DEFAULT NOW(),
    EMPLOYEE_ID BIGINT(8) UNSIGNED NOT NULL UNIQUE,
    ACCESS_LEVEL_ID TINYINT(1) UNSIGNED NOT NULL,
    AVAILABLE_ID TINYINT(1) UNSIGNED NOT NULL,
    PRIMARY KEY(SHAREHOLDER_ID),
    FOREIGN KEY(ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVEL(ACCESS_LEVEL_ID),
    FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY(AVAILABLE_ID) REFERENCES AVAILABLE(AVAILABLE_ID)
)ENGINE=innoDB COLLATE utf8mb4_unicode_ci;


DROP PROCEDURE IF EXISTS COUNTRY_DATA_Add;
DROP PROCEDURE IF EXISTS COUNTRY_DATA_Edit;
DROP PROCEDURE IF EXISTS COUNTRY_Add;
DROP PROCEDURE IF EXISTS COUNTRY_Edit;
DROP PROCEDURE IF EXISTS COUNTY_Add;
DROP PROCEDURE IF EXISTS COUNTY_Edit;
DROP PROCEDURE IF EXISTS EMPLOYEE_POSITION_Add;
DROP PROCEDURE IF EXISTS EMPLOYEE_DATA_Add;
DROP PROCEDURE IF EXISTS EMPLOYEE_DATA_Set;
DROP PROCEDURE IF EXISTS EMPLOYEE_Add;
DROP PROCEDURE IF EXISTS EMPLOYEE_Set;
DROP PROCEDURE IF EXISTS CUSTOMER_DATA_Add;
DROP PROCEDURE IF EXISTS CUSTOMER_DATA_Set;
DROP PROCEDURE IF EXISTS CUSTOMER_Add;
DROP PROCEDURE IF EXISTS CUSTOMER_Set;
DROP PROCEDURE IF EXISTS SHAREHOLDER_Add;
DROP PROCEDURE IF EXISTS SHAREHOLDER_Set;
DROP PROCEDURE IF EXISTS JOB_INCOME_Time_Add;
DROP PROCEDURE IF EXISTS JOB_INCOME_Time_Set;
DROP PROCEDURE IF EXISTS JOB_INCOME_Add;
DROP PROCEDURE IF EXISTS JOB_INCOME_Set;
DROP PROCEDURE IF EXISTS JOB_OUTCOME_Add;
DROP PROCEDURE IF EXISTS JOB_OUTCOME_Set;
DROP PROCEDURE IF EXISTS JOB_DATA_Add;
DROP PROCEDURE IF EXISTS JOB_DATA_Set;
DROP PROCEDURE IF EXISTS JOB_Add;
DROP PROCEDURE IF EXISTS JOB_Set;

CREATE PROCEDURE COUNTRY_DATA_Add(IN Title VARCHAR(32) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1), IN Available_ID TINYINT(1)) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COUNTRY_DATA_Add(COUN_DATA_TITLE, COUN_DATA_ACCESS_ID, COUN_DATA_AVAIL_ID) VALUES(Title, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COUNTRY_DATA_Set(IN ID BIGINT(8) UNSIGNED, IN Title VARCHAR(32) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COUNTRY_DATA_Edit SET COUN_DATA_TITLE = Title, COUN_DATA_ACCESS_ID = AccessLevel_ID, COUN_DATA_AVAIL_ID = Available_ID
WHERE VIEW_COUNTRY_DATA_Edit.COUN_DATA_ID = ID;

CREATE PROCEDURE COUNTRY_Add(IN DATA_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COUNTRY_Add(COUN_DATA_ID, COUN_ACCESS_ID, COUN_AVAIL_ID) VALUES(DATA_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COUNTRY_Set(IN ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COUNTRY_Edit SET COUN_ACCESS_ID = AccessLevel_ID, COUN_AVAIL_ID = Available_ID
WHERE VIEW_COUNTRY_Edit.COUN_ID = ID;

CREATE PROCEDURE COUNTY_Add(IN DATA_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COUNTY_Add(COU_DATA_ID, COU_ACCESS_ID, COU_AVAIL_ID) VALUES(DATA_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COUNTY_Set(IN ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COUNTY_Edit SET COU_ACCESS_ID = AccessLevel_ID, COU_AVAIL_ID = Available_ID
WHERE VIEW_COUNTY_Edit.COU_ID = ID;

CREATE PROCEDURE COUNTY_DATA_Add(IN Title VARCHAR(64) CHARSET utf8mb4, IN Tax DECIMAL(8,4), IN IR DECIMAL(8,4), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COUNTY_DATA_Add(COU_DATA_TITLE, COU_DATA_TAX, COU_DATA_IR, COU_DATA_ACCESS_ID, COU_DATA_AVAIL_ID) VALUES(Title, Tax, IR, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COUNTY_DATA_Set(IN Title VARCHAR(64) CHARSET utf8mb4, IN Tax DECIMAL(8,4), IN IR DECINAL(8,4), IN ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COUNTY_DATA_Edit SET COU_DATA_TITLE = Title, COU_DATA_TAX = Tax, COU_DATA_IR = IR, COU_DATA_ACCESS_ID = AccessLevel_ID, COU_DATA_AVAIL_ID = Available_ID
WHERE VIEW_COUNTRY_DATA_Edit.COU_DATA_ID = ID;

CREATE PROCEDURE EMPLOYEE_POSITION_Add(IN Title VARCHAR(64) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_EMPLOYEE_POSITION_Add(EMP_POS_Title, EMP_POS_ACCESS_ID, EMP_POS_AVAIL_ID) VALUES(Title, AccessLevel_ID, Available_ID);

CREATE PROCEDURE EMPLOYEE_POSITION_Set(IN ID BIGINT(8) UNSIGNED, IN Title VARCHAR(64) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_EMPLOYEE_POSITION_Edit SET EMP_POS_TITLE = Title, EMP_POS_ACCESS_ID = AccessLevel_ID, EMP_POS_AVAIL_ID = Available_ID
WHERE VIEW_EMPLOYEE_POSITION_Edit.EMP_POS_ID = ID;

CREATE PROCEDURE EMPLOYEE_DATA_Add(IN Salary DECIMAL(65,2), IN BDay DATE, IN PhoneNumber VARCHAR(16) CHARSET utf8mb4, IN StableNumber VARCHAR(16) CHARSET utf8mb4, IN Email VARCHAR(64) CHARSET utf8mb4, IN EmployeeName VARCHAR(32) CHARSET utf8mb4, IN EmployeeSurname VARCHAR(32) CHARSET utf8mb4, IN EncryptedPassword VARCHAR(64) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_EMPLOYEE_DATA_Add(EMP_DATA_SALARY, EMP_DATA_BDAY, EMP_DATA_PN, EMP_DATA_SN, EMP_DATA_EMAIL, EMP_DATA_NAME, EMP_DATA_SURNAME, EMP_DATA_PASSWORD, EMP_DATA_ACCESS_ID, EMP_DATA_AVAIL_ID) VALUES(Salary, BDay, PhoneNumber, StableNumber, Email, EmployeeName, EmployeeSurname, EncryptedPassword, AccessLevel_ID, Available_ID);

CREATE PROCEDURE EMPLOYEE_DATA_Set(IN ID BIGINT(8) UNSIGNED, IN Salary DECIMAL(65,2), IN BDay DATE, IN PhoneNumber VARCHAR(16) CHARSET utf8mb4, IN StableNumber VARCHAR(16) CHARSET utf8mb4, IN Email VARCHAR(64) CHARSET utf8mb4, IN EmployeeName VARCHAR(32) CHARSET utf8mb4, IN EmployeeSurname VARCHAR(32) CHARSET utf8mb4, IN EncryptedPassword VARCHAR(64) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_EMPLOYEE_DATA_Edit SET EMP_DATA_SALARY = Salary, EMP_DATA_BDAY = BDay, EMP_DATA_PN = PhoneNumber, EMP_DATA_SN = StableNumber, EMP_DATA_EMAIL = Email, EMP_DATA_NAME = EmployeeName, EMP_DATA_SURNAME = EmployeeSurname, EMP_DATA_PASSWORD = EncryptedPassword, EMP_DATA_ACCESS_ID = AccessLevel_ID, EMP_DATA_AVAIL_ID = Available_ID
WHERE VIEW_EMPLOYEE_DATA_Edit.EMP_DATA_ID = ID;

CREATE PROCEDURE EMPLOYEE_Add(IN EmployeePosition_ID BIGINT(8) UNSIGNED, IN EmployeeData_ID BIGINT(8) UNSIGNED, IN Company_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_EMPLOYEE_Add(EMP_POS_ID, EMP_DATA_ID, COMP_ID, EMP_ACCESS_ID, EMP_AVAIL_ID) VALUES(EmployeePosition_ID, EmployeeData_ID, Company_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE EMPLOYEE_Set(IN ID BIGINT(8) UNSIGNED, IN EmployeePosition_ID BIGINT(8) UNSIGNED, IN EmployeeData_ID BIGINT(8) UNSIGNED, IN Company_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_EMPLOYEE_Edit SET EMP_POS_ID = EmployeePosition_ID, EMP_DATA_ID = EmployeeData_ID, COMP_ID = Company_ID, EMP_ACCESS_ID = AccessLevel_ID, EMP_AVAIL_ID = Available_ID
WHERE VIEW_EMPLOYEE_Edit.EMPLOYEE_ID = ID;

CREATE PROCEDURE CUSTOMER_DATA_Add(IN CustomerName VARCHAR(32) CHARSET utf8mb4, IN CustomerSurname VARCHAR(32) CHARSET utf8mb4, IN PhoneNumber VARCHAR(16) CHARSET utf8mb4, IN StableNumber VARCHAR(16) CHARSET utf8mb4, IN Email VARCHAR(64) CHARSET utf8mb4, IN VAT VARCHAR(16) CHARSET utf8mb4, IN CustomerAddress VARCHAR(256) CHARSET utf8mb4, IN Note VARCHAR(256) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_CUSTOMER_DATA_Add(CUST_DATA_NAME, CUST_DATA_SURNAME, CUST_DATA_PN, CUST_DATA_SN, CUST_DATA_EMAIL, CUST_DATA_VAT, CUST_DATA_ADDR, CUST_DATA_NOTE, CUST_DATA_ACCESS_ID, CUST_DATA_AVAIL_ID) VALUES(CustomerName, CustomerSurname, PhoneNumber, StableNumber, Email, VAT, CustomerAddress, Note, AccessLevel_ID, Available_ID);

CREATE PROCEDURE CUSTOMER_DATA_SET(IN ID BIGINT(8) UNSIGNED, IN CustomerName VARCHAR(32) CHARSET utf8mb4, IN CustomerSurname VARCHAR(32) CHARSET utf8mb4, IN PhoneNumber VARCHAR(16) CHARSET utf8mb4, IN StableNumber VARCHAR(16) CHARSET utf8mb4, IN Email VARCHAR(64) CHARSET utf8mb4, IN VAT VARCHAR(16) CHARSET utf8mb4, IN CustomerAddress VARCHAR(256) CHARSET utf8mb4, IN Note VARCHAR(256) CHARSET utf8mb4, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_CUSTOMER_DATA_Edit SET CUST_DATA_NAME = CustomerName, CUST_DATA_SURNAME = CustomerSurname, CUST_DATA_PN = PhoneNumber, CUST_DATA_SN = StableNumber, CUST_DATA_EMAIL = Email, CUST_DATA_VAT = VAT, CUST_DATA_ADDR = CustomerAddress, CUST_DATA_NOTE = Note, CUST_DATA_ACCESS_ID = AccessLevel_ID, CUST_DATA_AVAIL_ID = Available_ID
WHERE VIEW_CUSTOMER_DATA_Edit.CUST_DATA_ID = ID;

CREATE PROCEDURE CUSTOMER_Add(IN Data_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_CUSTOMER_Add(CUST_DATA_ID, CUST_ACCESS_ID, CUST_AVAIL_ID) VALUES(Data_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE CUSTOMER_SET(IN ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_CUSTOMER_Edit SET CUST_ACCESS_ID = AccessLevel_ID, CUST_AVAIL_ID = Available_ID
WHERE VIEW_CUSTOMER_Edit.CUST_ID = ID;

CREATE PROCEDURE SHAREHOLDER_Add(IN Employee_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_SHAREHOLDER_Add(EMP_ID, SHARE_ACCESS_ID, SHARE_AVAIL_ID) VALUES(Employee_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE SHAREHOLDER_Set(IN ID BIGINT(8) UNSIGNED, IN Employee_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_SHAREHOLDER_Edit SET EMP_ID = Employee_ID, SHARE_ACCESS_ID = AccessLevel_ID, SHARE_AVAIL_ID = Available_ID
WHERE VIEW_SHAREHOLDER_Edit.SHARE_ID = ID;

CREATE PROCEDURE JOB_INCOME_TIME_Add(IN Job_ID BIGINT(8) UNSIGNED, IN JobPIT DECIMAL(65,2), IN JobPITDate DATE, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_JOB_INCOME_TIME_Add(JOB_ID, JOB_PIT_PAYMENT, JOB_PIT_DATE, JOB_PIT_ACCESS_ID, JOB_PIT_AVAIL_ID) VALUES(JobID, JobPIT, JobPITDate, AccessLevel_ID, Available_ID);

CREATE PROCEDURE JOB_INCOME_TIME_Set(IN ID BIGINT(8) UNSIGNED, IN Job_ID BIGINT(8) UNSIGNED, IN JobPIT DECIMAL(65,2), IN JobPITDate DATE, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_JOB_INCOME_TIME_Edit SET JOB_ID = Job_ID, JOB_PIT_PAYMENT = JobPIT, JOB_PIT_DATE = JobPITDate, JOB_PIT_ACCESS_ID = AccessLevel_ID, JOB_PIT_AVAIL_ID = Available_ID
WHERE VIEW_JOB_INCOME_TIME_Edit.JOB_PIT_ID = ID;

CREATE PROCEDURE JOB_OUTCOME_Add(IN JobExpenses DECIMAL(65,2), IN JobDamage DECIMAL(65,2), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_JOB_OUTCOME_Add(JOB_OUT_EXPENSES, JOB_OUT_DAMAGE, JOB_OUT_ACCESS_ID, JOB_OUT_AVAIL_ID) VALUES(JobID, JobExpenses, JobDamage, AccessLevel_ID, Available_ID);

CREATE PROCEDURE JOB_OUTCOME_Set(IN ID BIGINT(8) UNSIGNED, IN JobOutcomeExpenses DECIMAL(65,2), IN JobOutcomeDamage DECIMAL(65,2), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_JOB_OUTCOME_Edit SET JOB_OUT_EXPENSES = JobOutcomeExpenses, JOB_OUT_DAMAGE = JobOutcomeDamage, JOB_OUT_ACCESS_ID = AccessLevel_ID, JOB_OUT_AVAIL_ID = Available_ID
WHERE VIEW_JOB_OUTCOME_Edit.JOB_OUT_ID = ID;

CREATE PROCEDURE JOB_INCOME_Add(IN JobPrice DECIMAL(65,2), IN JobPIA DECIMAL(65,2), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_JOB_INCOME_Add(JOB_INC_PRICE, JOB_INC_PIA, JOB_INC_ACCESS_ID, JOB_INC_AVAIL_ID) VALUES(JobPrice, JobPIA, AccessLevel_ID, Available_ID);

CREATE PROCEDURE JOB_INCOME_Set(IN ID BIGINT(8) UNSIGNED, IN JobPrice DECIMAL(65,2), IN JobPIA DECIMAL(65,2), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_JOB_INCOME_Edit SET JOB_INC_PRICE = JobPrice, JOB_INC_PIA = JobPIA, JOB_INC_ACCESS_ID = AccessLevel_ID, JOB_INC_AVAIL_ID = Available_ID
WHERE VIEW_JOB_INCOME_Edit.JOB_INC_ID = ID;

CREATE PROCEDURE JOB_DATA_Add(IN JobTitle VARCHAR(64) CHARSET utf8mb4, IN JobDate DECIMAL(65,2), IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_JOB_DATA_Add(JOB_DATA_TITLE, JOB_DATA_DATE, JOB_DATA_ACCESS_ID, JOB_DATA_AVAIL_ID) VALUES(JobTitle, JobDate, AccessLevel_ID, Available_ID);

CREATE PROCEDURE JOB_DATA_Set(IN ID BIGINT(8) UNSIGNED, IN JobTitle VARCHAR(64) CHARSET utf8mb4, IN JobDate DATE, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_JOB_DATA_Edit SET JOB_DATA_TITLE = JobTitle, JOB_DATA_DATE = JobDate, JOB_DATA_ACCESS_ID = AccessLevel_ID, JOB_DATA_AVAIL_ID = Available_ID
WHERE VIEW_JOB_DATA_Edit.JOB_DATA_ID = ID;

CREATE PROCEDURE JOB_Add(IN Data_ID BIGINT(8) UNSIGNED, IN Income_ID BIGINT(8) UNSIGNED, IN Outcome_ID BIGINT(8) UNSIGNED, IN Company_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_JOB_Add(JOB_DATA_ID, JOB_INC_ID, JOB_OUT_ID, COMP_ID, JOB_ACCESS_ID, JOB_AVAIL_ID) VALUES(Data_ID, Income_ID, Outcome_ID, Company_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE JOB_Set(IN ID BIGINT(8) UNSIGNED, IN Data_ID BIGINT(8) UNSIGNED, IN Income_ID BIGINT(8) UNSIGNED, IN Outcome_ID BIGINT(8) UNSIGNED, IN Company_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_JOB_Edit SET JOB_DATA_ID = Data_ID, JOB_INC_ID = Income_ID, JOB_OUT_ID = Income_ID, COMP_ID = Company_ID, JOB_ACCESS_ID = AccessLevel_ID, JOB_AVAIL_ID = Available_ID
WHERE VIEW_JOB_Edit.JOB_ID = ID;

CREATE PROCEDURE COMPANY_DATA_Add(IN Title VARCHAR(64) CHARSET utf8mb4, IN CompanyDate DATE, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COMPANY_DATA_Add(COMP_DATA_TITLE, COMP_DATA_DATE, COMP_DATA_ACCESS, COMP_DATA_AVAIL) VALUES(Title, CompanyDate, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COMPANY_DATA_Set(IN ID BIGINT(8) UNSIGNED, IN Title VARCHAR(64) CHARSET utf8mb4, IN CompanyDate DATE, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COMPANY_DATA_Edit SET COMP_DATA_TITLE = Title, COMP_DATA_DATE = CompanyDate, COMP_DATA_ACCESS_ID = AccessLevel_ID, COMP_DATA_AVAIL_ID = Available_ID
WHERE VIEW_COMPANY_DATA_Edit.COMP_DATA_ID = ID;

CREATE PROCEDURE COMPANY_Add(IN Data_ID BIGINT(8) UNSIGNED, IN County_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
INSERT INTO VIEW_COMPANY_Add(COMP_DATA_ID, COU_ID, COMP_ACCESS_ID, COMP_AVAIL_ID) VALUES(Data_ID, County_ID, AccessLevel_ID, Available_ID);

CREATE PROCEDURE COMPANY_Set(IN ID BIGINT(8) UNSIGNED, IN Data_ID BIGINT(8) UNSIGNED, IN County_ID BIGINT(8) UNSIGNED, IN AccessLevel_ID TINYINT(1) UNSIGNED, IN Available_ID TINYINT(1) UNSIGNED) NOT DETERMINISTIC SQL SECURITY INVOKER
UPDATE VIEW_COMPANY_Edit SET COMP_DATA_ID = Data_ID, COU_ID = County_ID, COMP_ACCESS_ID = AccessLevel_ID, COMP_AVAIL_ID = Available_ID
WHERE VIEW_COMPANY_Edit.COMP_ID = ID;